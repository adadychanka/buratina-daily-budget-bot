import { Scenes } from "telegraf/scenes";
import { BotContext, ReportData } from "../../types/bot";
import { ReportSchema } from "../../types/report";

export const reportScene = new Scenes.BaseScene<BotContext>("report");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
reportScene.enter(async (ctx) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
  ctx.session = ctx.session || {};
  ctx.session.reportData = {};
  ctx.session.currentScene = "report";
  ctx.session.step = "cashAmount";

  await ctx.reply(
    "üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö (Cash amount):"
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
reportScene.on("text", async (ctx) => {
  const step = ctx.session?.step;
  const reportData = ctx.session?.reportData || {};

  try {
    switch (step) {
      case "cashAmount":
        await handleCashAmount(ctx, reportData);
        break;
      case "whiteCashAmount":
        await handleWhiteCashAmount(ctx, reportData);
        break;
      case "blackCashAmount":
        await handleBlackCashAmount(ctx, reportData);
        break;
      case "blackCashLocation":
        await handleBlackCashLocation(ctx, reportData);
        break;
      case "cardSalesAmount":
        await handleCardSalesAmount(ctx, reportData);
        break;
      case "expenses":
        await handleExpenses(ctx, reportData);
        break;
      case "cashboxAmount":
        await handleCashboxAmount(ctx, reportData);
        break;
      case "notes":
        await handleNotes(ctx, reportData);
        break;
      default:
        await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report");
    }
  } catch (error) {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    console.error("Error in report scene:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
async function handleCashAmount(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const amount = parseFloat(ctx.message?.text || "0");

  if (isNaN(amount) || amount < 0) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):");
    return;
  }

  reportData.cashAmount = amount;
  ctx.session!.step = "whiteCashAmount";

  await ctx.reply("‚úÖ –°—É–º–º–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É White Cash:");
}

async function handleWhiteCashAmount(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const amount = parseFloat(ctx.message?.text || "0");

  if (isNaN(amount) || amount < 0) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):");
    return;
  }

  reportData.whiteCashAmount = amount;
  ctx.session!.step = "blackCashAmount";

  await ctx.reply("‚úÖ White Cash —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É Black Cash:");
}

async function handleBlackCashAmount(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const amount = parseFloat(ctx.message?.text || "0");

  if (isNaN(amount) || amount < 0) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):");
    return;
  }

  reportData.blackCashAmount = amount;
  ctx.session!.step = "blackCashLocation";

  await ctx.reply(
    '‚úÖ Black Cash —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n–ì–¥–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω Black Cash? (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Friday", "Monday"):'
  );
}

async function handleBlackCashLocation(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const location = ctx.message?.text?.trim();

  if (!location) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è Black Cash:");
    return;
  }

  reportData.blackCashLocation = location;
  ctx.session!.step = "cardSalesAmount";

  await ctx.reply(
    "‚úÖ –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è Black Cash —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ä—Ç–µ:"
  );
}

async function handleCardSalesAmount(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const amount = parseFloat(ctx.message?.text || "0");

  if (isNaN(amount) || amount < 0) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):");
    return;
  }

  reportData.cardSalesAmount = amount;
  reportData.expenses = [];
  ctx.session!.step = "expenses";

  await ctx.reply(
    '‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ä—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã? (–¥–∞/–Ω–µ—Ç –∏–ª–∏ "skip" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):'
  );
}

async function handleExpenses(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const text = ctx.message?.text?.toLowerCase().trim();

  if (text === "skip" || text === "–Ω–µ—Ç" || text === "no") {
    ctx.session!.step = "cashboxAmount";
    await ctx.reply(
      "‚úÖ –†–∞—Å—Ö–æ–¥—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –∫–∞—Å—Å–µ –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã:"
    );
    return;
  }

  if (text === "–¥–∞" || text === "yes") {
    await ctx.reply("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:");
    return;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥
  const amount = parseFloat(ctx.message?.text || "0");
  if (!isNaN(amount) && amount > 0) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    await ctx.reply("‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω\n\n–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:");
    return;
  }

  await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å "–¥–∞", "–Ω–µ—Ç" –∏–ª–∏ "skip":');
}

async function handleCashboxAmount(
  ctx: BotContext,
  reportData: Partial<ReportData>
) {
  const amount = parseFloat(ctx.message?.text || "0");

  if (isNaN(amount) || amount < 0) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):");
    return;
  }

  reportData.cashboxAmount = amount;
  ctx.session!.step = "notes";

  await ctx.reply(
    '‚úÖ –°—É–º–º–∞ –≤ –∫–∞—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n–î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–∏–ª–∏ "skip" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):'
  );
}

async function handleNotes(ctx: BotContext, reportData: Partial<ReportData>) {
  const text = ctx.message?.text?.trim();

  if (text && text.toLowerCase() !== "skip") {
    reportData.notes = text;
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
  const totalSales =
    (reportData.cashAmount || 0) +
    (reportData.whiteCashAmount || 0) +
    (reportData.blackCashAmount || 0) +
    (reportData.cardSalesAmount || 0);

  reportData.totalSales = totalSales;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  await showReportSummary(ctx, reportData as ReportData);
}

async function showReportSummary(ctx: BotContext, reportData: ReportData) {
  const summary = `
üìä –°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–∞:

üí∞ –ù–∞–ª–∏—á–Ω—ã–µ: ${reportData.cashAmount}
üí≥ White Cash: ${reportData.whiteCashAmount}
üñ§ Black Cash: ${reportData.blackCashAmount} (${
    reportData.blackCashLocation || "N/A"
  })
üí≥ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ä—Ç–µ: ${reportData.cardSalesAmount}
üì¶ –†–∞—Å—Ö–æ–¥—ã: ${reportData.expenses?.length || 0} —à—Ç.
üí∞ –í –∫–∞—Å—Å–µ: ${reportData.cashboxAmount}
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${reportData.notes || "–ù–µ—Ç"}

üìà –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: ${reportData.totalSales}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç? (–¥–∞/–Ω–µ—Ç)
  `;

  await ctx.reply(summary);
  ctx.session!.step = "confirmation";
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
reportScene.on("text", async (ctx) => {
  if (ctx.session?.step === "confirmation") {
    const text = ctx.message?.text?.toLowerCase().trim();

    if (text === "–¥–∞" || text === "yes") {
      // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Google Sheets
      await ctx.reply("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
      await ctx.scene.leave();
    } else if (text === "–Ω–µ—Ç" || text === "no") {
      await ctx.reply("‚ùå –û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report");
      await ctx.scene.leave();
    } else {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç":');
    }
  }
});
