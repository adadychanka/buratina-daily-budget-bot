---
title: Docker Containerization
description: Docker best practices and deployment
priority: 5
tags: [docker, deployment, security]
---

# Docker Containerization

## Dockerfile Standards

### Multi-Stage Builds

Always use multi-stage builds for optimization.

```dockerfile
# Multi-stage build for optimization
FROM node:22.20.0-alpine AS base

# Set working directory
WORKDIR /app

# Copy dependency files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Generate Prisma client
RUN npx prisma generate

# Create user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S bot -u 1001

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Change file ownership
RUN chown -R bot:nodejs /app
USER bot

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "console.log('Bot is healthy')" || exit 1

# Start command
CMD ["node", "dist/index.js"]
```

### Best Practices

1. **Use Alpine base image** - Smaller size, better security
2. **Run as non-root user** - Create dedicated user
3. **Include health checks** - Monitor container health
4. **Minimize layers** - Combine RUN commands where possible
5. **Cache dependencies** - Copy package files before source code
6. **Clean npm cache** - Reduce image size
7. **All comments in English** - No Russian or other languages

## Docker Compose

### Production Configuration

```yaml
# docker-compose.yml
version: "3.8"

services:
  bot:
    build: .
    container_name: daily-budget-bot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_SHEETS_ID=${GOOGLE_SHEETS_ID}
      - GOOGLE_CREDENTIALS_PATH=/app/credentials/service-account-key.json
    volumes:
      - ./src/services/credentials:/app/credentials:ro
      - bot-data:/app/data
    networks:
      - bot-network

volumes:
  bot-data:

networks:
  bot-network:
    driver: bridge
```

### Development Configuration

```yaml
# docker-compose.dev.yml
version: "3.8"

services:
  bot:
    build: .
    container_name: daily-budget-bot-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_SHEETS_ID=${GOOGLE_SHEETS_ID}
      - GOOGLE_CREDENTIALS_PATH=/app/credentials/service-account-key.json
    volumes:
      - .:/app
      - /app/node_modules
      - ./src/services/credentials:/app/credentials:ro
    command: npm run dev
    networks:
      - bot-network

networks:
  bot-network:
    driver: bridge
```

## Docker Commands

```bash
# Build image
npm run docker:build

# Run production
npm run docker:prod

# Run development
npm run docker:dev

# Stop containers
docker-compose down

# View logs
docker-compose logs -f
```

## .dockerignore

Exclude unnecessary files from Docker context:

```
node_modules
dist
.git
.env
*.log
tests
*.md
.vscode
.idea
coverage
.cache
```

## Security Best Practices

### 1. Non-Root User

```dockerfile
# Create and use non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S bot -u 1001
USER bot
```

### 2. Read-Only Volumes

```yaml
volumes:
  - ./credentials:/app/credentials:ro # Read-only
```

### 3. Minimal Base Image

```dockerfile
FROM node:22.20.0-alpine  # Alpine is minimal and secure
```

### 4. No Secrets in Dockerfile

```dockerfile
# ❌ Never do this
ENV BOT_TOKEN=123456789:ABCDEF...

# ✅ Use environment variables
ENV BOT_TOKEN=${BOT_TOKEN}
```

### 5. Health Checks

```dockerfile
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "console.log('Bot is healthy')" || exit 1
```

## Volume Management

### Persistent Data

```yaml
volumes:
  - bot-data:/app/data # Database files
  - bot-logs:/app/logs # Log files
```

### Development Hot Reload

```yaml
volumes:
  - .:/app # Source code
  - /app/node_modules # Don't override node_modules
```

## Deployment Checklist

- [ ] Build succeeds without errors
- [ ] All tests pass
- [ ] Environment variables configured
- [ ] Credentials mounted correctly
- [ ] Health check working
- [ ] Logs accessible
- [ ] Container restarts on failure
- [ ] All comments in English
