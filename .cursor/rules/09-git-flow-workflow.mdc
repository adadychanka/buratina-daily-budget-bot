---
title: Git Flow Workflow
description: Git Flow branching model and workflow standards
priority: 5
tags: [git, git-flow, branches, workflow, version-control]
---

# Git Flow Workflow

## Overview

This project uses **Git Flow** - a branching model that provides a robust framework for managing larger projects with scheduled releases.

## Branch Structure

### Main Branches

These branches have an infinite lifetime:

#### `main`

- **Purpose**: Production-ready code only
- **Protected**: Yes, requires pull request
- **Never commit directly**: Always merge from `release` or `hotfix`
- **Tagged**: Each merge creates a version tag (e.g., `v1.0.0`)

#### `develop`

- **Purpose**: Integration branch for features
- **Latest development state**: Contains all completed features
- **Never commit directly**: Always merge from `feature` branches
- **Source for**: `feature`, `release` branches

### Supporting Branches

These branches have a limited lifetime and are deleted after merge:

#### `feature/*`

- **Purpose**: New features and enhancements
- **Branch from**: `develop`
- **Merge back to**: `develop`
- **Naming**: `feature/<feature-name>`
- **Lifetime**: Until feature is complete

#### `release/*`

- **Purpose**: Prepare for production release
- **Branch from**: `develop`
- **Merge to**: `main` AND `develop`
- **Naming**: `release/<version>` (e.g., `release/1.2.0`)
- **Activities**: Bug fixes, version bumps, documentation

#### `hotfix/*`

- **Purpose**: Critical production fixes
- **Branch from**: `main`
- **Merge to**: `main` AND `develop`
- **Naming**: `hotfix/<version>` (e.g., `hotfix/1.0.1`)
- **Lifetime**: Until fix is deployed

## Workflow Examples

### Starting a New Feature

```bash
# 1. Switch to develop and update
git checkout develop
git pull origin develop

# 2. Create feature branch
git checkout -b feature/add-expense-categories

# 3. Work on feature
git add .
git commit -m "feat: add expense category selection"
git commit -m "feat: add category validation"
git commit -m "test: add category tests"

# 4. Push feature branch
git push -u origin feature/add-expense-categories

# 5. Create Pull Request to develop
# (via GitHub UI)

# 6. After PR is merged, delete branch
git checkout develop
git pull origin develop
git branch -d feature/add-expense-categories
git push origin --delete feature/add-expense-categories
```

### Creating a Release

```bash
# 1. Create release branch from develop
git checkout develop
git pull origin develop
git checkout -b release/1.2.0

# 2. Update version number
# Edit package.json: "version": "1.2.0"
git add package.json
git commit -m "chore: bump version to 1.2.0"

# 3. Fix release bugs if needed
git commit -m "fix: resolve login issue for release"

# 4. Merge to main
git checkout main
git pull origin main
git merge --no-ff release/1.2.0
git tag -a v1.2.0 -m "Release version 1.2.0"
git push origin main --tags

# 5. Merge back to develop
git checkout develop
git pull origin develop
git merge --no-ff release/1.2.0
git push origin develop

# 6. Delete release branch
git branch -d release/1.2.0
git push origin --delete release/1.2.0
```

### Creating a Hotfix

```bash
# 1. Create hotfix branch from main
git checkout main
git pull origin main
git checkout -b hotfix/1.2.1

# 2. Fix the critical bug
git add .
git commit -m "fix: resolve critical authentication bug"

# 3. Update version
# Edit package.json: "version": "1.2.1"
git add package.json
git commit -m "chore: bump version to 1.2.1"

# 4. Merge to main
git checkout main
git merge --no-ff hotfix/1.2.1
git tag -a v1.2.1 -m "Hotfix version 1.2.1"
git push origin main --tags

# 5. Merge to develop
git checkout develop
git merge --no-ff hotfix/1.2.1
git push origin develop

# 6. Delete hotfix branch
git branch -d hotfix/1.2.1
git push origin --delete hotfix/1.2.1
```

## Branch Naming Conventions

### Feature Branches

```
feature/user-authentication
feature/google-sheets-export
feature/expense-categories
feature/report-templates
```

### Release Branches

```
release/1.0.0
release/1.1.0
release/2.0.0
```

### Hotfix Branches

```
hotfix/1.0.1
hotfix/1.2.3
hotfix/2.1.1
```

## Commit Message Standards

### Format

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Types

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation only
- **style**: Code style (formatting, no logic change)
- **refactor**: Code refactoring
- **perf**: Performance improvement
- **test**: Adding/updating tests
- **chore**: Maintenance (dependencies, config)
- **ci**: CI/CD changes
- **build**: Build system changes

### Examples

```bash
# Feature
git commit -m "feat: add expense category filtering"
git commit -m "feat(bot): implement /history command"

# Bug fix
git commit -m "fix: resolve Google Sheets timeout issue"
git commit -m "fix(validation): handle negative amounts correctly"

# Documentation
git commit -m "docs: update README with Docker instructions"
git commit -m "docs(api): add JSDoc comments to validators"

# Refactoring
git commit -m "refactor: simplify report validation logic"
git commit -m "refactor(formatters): extract date formatting utility"

# Testing
git commit -m "test: add integration tests for bot handlers"
git commit -m "test(validators): add edge case scenarios"

# Maintenance
git commit -m "chore: update dependencies to latest versions"
git commit -m "chore(deps): upgrade Telegraf to 4.16.3"
```

## Version Numbering (Semantic Versioning)

Follow **Semantic Versioning** (SemVer): `MAJOR.MINOR.PATCH`

### Version Components

- **MAJOR** (1.0.0): Breaking changes, incompatible API changes
- **MINOR** (0.1.0): New features, backward-compatible
- **PATCH** (0.0.1): Bug fixes, backward-compatible

### Examples

```
1.0.0 → 1.0.1  (Hotfix: bug fix)
1.0.1 → 1.1.0  (Release: new feature)
1.1.0 → 2.0.0  (Release: breaking change)
```

## Pull Request Guidelines

### PR Title

Use same format as commit messages:

```
feat: add expense category filtering
fix: resolve Google Sheets authentication error
docs: update setup instructions
```

### PR Description Template

```markdown
## Description

Brief description of changes

## Type of Change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update

## Changes Made

- Added expense category selection UI
- Implemented category validation
- Updated tests

## Testing

- [ ] Local testing completed
- [ ] All tests passing
- [ ] Manual testing on staging

## Checklist

- [ ] Code follows project style guidelines
- [ ] Self-review completed
- [ ] Comments added for complex code
- [ ] Documentation updated
- [ ] Tests added/updated
- [ ] All tests passing
- [ ] No new warnings
- [ ] Branch is up to date with target branch
```

### PR Review Process

1. **Create PR** from feature/hotfix/release branch
2. **Request review** from team members
3. **Address feedback** and push changes
4. **Squash commits** if needed (optional)
5. **Merge** after approval
6. **Delete branch** after merge

## Protected Branches

### `main` Branch Protection

- ✅ Require pull request before merging
- ✅ Require approvals (1+ reviewers)
- ✅ Require status checks to pass
- ✅ Require branches to be up to date
- ✅ Require signed commits (optional)
- ❌ Allow force pushes
- ❌ Allow deletions

### `develop` Branch Protection

- ✅ Require pull request before merging
- ✅ Require status checks to pass
- ❌ Allow force pushes
- ❌ Allow deletions

## Git Flow Commands

### Install Git Flow (Optional)

```bash
# macOS
brew install git-flow

# Linux
apt-get install git-flow

# Initialize git flow in repository
git flow init
```

### Git Flow Commands

```bash
# Start a feature
git flow feature start expense-categories

# Finish a feature (merges to develop)
git flow feature finish expense-categories

# Start a release
git flow release start 1.2.0

# Finish a release (merges to main and develop, creates tag)
git flow release finish 1.2.0

# Start a hotfix
git flow hotfix start 1.2.1

# Finish a hotfix (merges to main and develop, creates tag)
git flow hotfix finish 1.2.1
```

## Best Practices

### ✅ Do

- **Commit often** - Small, focused commits
- **Write clear messages** - Follow conventional commits
- **Pull before push** - Avoid merge conflicts
- **Review your changes** - Use `git diff` before committing
- **Test before merging** - Ensure all tests pass
- **Delete merged branches** - Keep repository clean
- **Use meaningful branch names** - Descriptive and specific
- **Tag releases** - Use semantic versioning
- **Sign commits** (optional) - GPG signing for authenticity

### ❌ Don't

- **Don't commit to main** - Always use branches
- **Don't force push to protected branches** - Ever
- **Don't commit large files** - Use `.gitignore`
- **Don't commit credentials** - Use environment variables
- **Don't use generic messages** - "fix stuff", "WIP"
- **Don't skip tests** - Always run tests before committing
- **Don't leave branches open** - Merge or delete old branches
- **Don't mix concerns** - One feature/fix per branch

## Handling Merge Conflicts

```bash
# 1. Update your branch
git checkout feature/my-feature
git fetch origin
git merge origin/develop

# 2. Resolve conflicts in your editor
# Look for conflict markers: <<<<<<<, =======, >>>>>>>

# 3. Mark as resolved
git add <conflicted-files>

# 4. Complete the merge
git commit -m "merge: resolve conflicts with develop"

# 5. Push updated branch
git push origin feature/my-feature
```

## Emergency Procedures

### Reverting a Commit

```bash
# Revert last commit (creates new commit)
git revert HEAD

# Revert specific commit
git revert <commit-hash>
```

### Rolling Back a Release

```bash
# 1. Create hotfix from previous version
git checkout v1.1.0
git checkout -b hotfix/rollback-1.2.0

# 2. Update version
# Edit package.json: "version": "1.1.1"
git commit -m "chore: rollback to 1.1.1"

# 3. Follow hotfix procedure
```

## Workflow Diagram

```
main       o---o---o---o---o---o  (v1.0.0)  (v1.1.0)  (v1.2.0)
            \       \           \
develop      o---o---o---o---o---o---o---o
              \     /     \     /
feature/a      o---o       \   /
                            \ /
feature/b                    o---o
```

## Git Aliases (Optional)

Add to `~/.gitconfig`:

```ini
[alias]
  co = checkout
  br = branch
  ci = commit
  st = status
  unstage = reset HEAD --
  last = log -1 HEAD
  visual = log --oneline --graph --decorate --all
  amend = commit --amend --no-edit
```

## Language Requirements

- **All commit messages in English**
- **All branch names in English**
- **All PR descriptions in English**
- **All code comments in English**
- **No Russian or other languages**

## Continuous Integration

### Pre-merge Checks

All PRs must pass:

- ✅ `npm run check` (linting)
- ✅ `npm run build` (compilation)
- ✅ `npm run test:run` (tests)

### GitHub Actions

```yaml
# .github/workflows/ci.yml
name: CI
on: [pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm ci
      - run: npm run check
      - run: npm run build
      - run: npm run test:run
```
